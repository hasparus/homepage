---
/**
 * @file Optimized Image component with placeholder
 *
 * This file started as a "fork" / "eject" of Image from `@astrojs/image`,
 * because I couldn't get its props to expose from an Image component that
 * would compose it.
 *
 * The `@ts-ignore` at the top of the original file didn't add much confidence too.
 *
 * @changes
 * - Added placeholder powered by `plaiceholder` CSS strategy.
 * - Limited the width of the image to wide container width, to get smaller & ligher images.
 */

import type { ImageMetadata, ImageTransform } from "astro";
import {
  getImage,
  type LocalImageProps,
  type RemoteImageProps,
} from "astro:assets";
import { readFile } from "node:fs/promises";
import { getPlaiceholder } from "plaiceholder";

import "./Image.css";

// All* images with `src`s starting from / are imported from `src/images/` folder.
const SRC_IMAGES_PREFIX = "/";

// Images with `src` starting with /content/ live in public dir.
const PUBLIC_IMAGES_PREFIX = "/content/";

// No image needs to be wider than this.
// TODO: Support High DPI screens by ensuring Astro emits images 2x of that.
const WIDE_CONTAINER_WIDTH = 774;

interface LocalProps extends LocalImageProps {
  aspectRatio?: number | string;
}
interface RemoteProps extends RemoteImageProps {
  aspectRatio?: number | string;
}
export type Props = LocalProps | RemoteProps;

const { loading = "lazy", decoding = "async", ...props } = Astro.props as Props;

let width = props.width;
let height = props.height;

let src = await props.src;
if (typeof src === "object") {
  if ("default" in src) src = src.default;
  if ("src" in src) {
    src = src.src;
  }
}

const pathToImage = decodeURIComponent(
  src.startsWith(SRC_IMAGES_PREFIX)
    ? `../../../src/images${src.slice(SRC_IMAGES_PREFIX.length - 1)}`
    : src,
);
let importedImage = null;

let placeholder: null | {
  backgroundImage: string;
  backgroundPosition: string;
  backgroundSize: string;
  backgroundRepeat: string;
} = null;

const isRaw = src.startsWith("raw!") || src.startsWith(PUBLIC_IMAGES_PREFIX);
if (isRaw) {
  src = src.slice(4);

  if (src.startsWith(PUBLIC_IMAGES_PREFIX)) {
    const globbed = import.meta.glob<false, string, { default: ImageMetadata }>(
      "../../../public/content/**/*",
    );
    const path = "../../../public" + src;
    const imported = (await globbed[path]!()).default;

    // I'm preserving the aspect ratio of the imported image, because
    // the 'raw' images can contain text or important details that should
    // not be cut off.
    height =
      parseFloat(props.width as string) /
      parseFloat(props.aspectRatio as string);
    props.aspectRatio = imported.width / imported.height;
    width = height * (imported.width / imported.height);
  }
} else {
  if (src.startsWith(SRC_IMAGES_PREFIX)) {
    src = src.slice(SRC_IMAGES_PREFIX.length - 1);
    const allImages = import.meta.glob<
      false,
      string,
      { default: ImageMetadata }
    >("../../../src/images/**/*");

    try {
      importedImage = (await allImages[pathToImage.replace("../src/", "")]!())
        .default;
    } catch (err) {
      console.error({ allImages, pathToImage });
      throw err;
    }
    props.width ??= importedImage.width;
    props.height ??= importedImage.height;
    if ((importedImage.format = "jpg")) importedImage.format = "webp";
  }

  const imageForPlaceholder = await (pathToImage.startsWith("http")
    ? fetch(pathToImage).then(async (res) =>
        Buffer.from(await res.arrayBuffer()),
      )
    : readFile(new URL(pathToImage, import.meta.url)));

  const { metadata, css } = await getPlaiceholder(imageForPlaceholder, {
    size: 10,
  });
  placeholder = css;

  if (!width && !height && !props.aspectRatio) {
    width ??= metadata.width;
    props.aspectRatio ??= metadata.width / metadata.height;
    width = Math.min(width, WIDE_CONTAINER_WIDTH);
    height = Math.round(width / parseFloat(props.aspectRatio as string));
  }
}

height ??=
  typeof props.aspectRatio === "number"
    ? parseFloat(width as unknown as string) / props.aspectRatio
    : undefined;

props.alt ||= "";
let attrs = { src, class: "", width, height, aspectRatio: props.aspectRatio };

if (!isRaw) {
  let attributes;
  props.src = src;
  ({ src, attributes } = await getImage({
    ...props,
    src: importedImage || src,
    format: "webp",
    width,
    height,
  } as ImageTransform));
  attrs = { ...attrs, ...attributes, src };
}
---

<span
  zaduma-image
  class:list={[
    "zaduma-image-box relative block overflow-hidden",
    !placeholder &&
      "bg-current/10 !inline-flex w-[var(--wide-content-width)] justify-center [&>img]:h-full [&>img]:object-contain",
  ]}
>
  <img
    {...attrs}
    class:list={["rounded-sm dark:opacity-80", attrs.class]}
    loading={loading}
    decoding={decoding}
  />
  {
    placeholder && (
      <span
        style={placeholder}
        class="absolute inset-0 -z-10 h-full w-full scale-150 transform blur-2xl filter dark:opacity-80"
      />
    )
  }
</span>
