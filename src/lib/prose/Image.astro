---
/**
 * @file Optimized Image component with placeholder
 *
 * This file started as a "fork" / "eject" of Image from `@astrojs/image`,
 * because I couldn't get its props to expose from an Image component that
 * would compose it.
 *
 * The `@ts-ignore` at the top of the original file didn't add much confidence too.
 *
 * @changes
 * - Added placeholder powered by `plaiceholder` CSS strategy.
 */

import type { ImageMetadata, ImageTransform } from "astro";
import {
  getImage,
  type LocalImageProps,
  type RemoteImageProps,
} from "astro:assets";
import fs from "node:fs/promises";
import { getPlaiceholder } from "plaiceholder";

import "./Image.css";

// All images with `src`s starting from / are imported from `src/images/` folder.
const SRC_IMAGES_PREFIX = "/";

interface LocalProps extends LocalImageProps {
  aspectRatio?: number | string;
}
interface RemoteProps extends RemoteImageProps {
  aspectRatio?: number | string;
}
export type Props = LocalProps | RemoteProps;

const { loading = "lazy", decoding = "async", ...props } = Astro.props as Props;

let width = props.width;
let height = props.height;

let src = await props.src;
if (typeof src === "object") {
  if ("default" in src) src = src.default;
  if ("src" in src) {
    src = src.src;
  }
}

const pathToImage = decodeURIComponent(
  src.startsWith(SRC_IMAGES_PREFIX)
    ? `../../../src/images${src.slice(SRC_IMAGES_PREFIX.length - 1)}`
    : src,
);
let importedImage = null;

if (src.startsWith(SRC_IMAGES_PREFIX)) {
  src = src.slice(SRC_IMAGES_PREFIX.length - 1);
  const allImages = import.meta.glob<false, string, { default: ImageMetadata }>(
    "../../../src/images/**/*",
  );

  try {
    importedImage = (await allImages[pathToImage.replace("../src/", "")]!())
      .default;
  } catch (err) {
    console.error({ allImages, pathToImage });
    throw err;
  }
  props.width ??= importedImage.width;
  props.height ??= importedImage.height;
  if ((importedImage.format = "jpg")) importedImage.format = "webp";
}

const isRaw = src.startsWith("raw!");
if (isRaw) src = src.slice(4);

const placeholder = await getPlaiceholder(
  await fs.readFile(new URL(pathToImage, import.meta.url)),
  { size: 10 },
);

if (!width && !height && !props.aspectRatio) {
  const { metadata } = placeholder;
  width ??= metadata.width;
  props.aspectRatio ??= metadata.width / metadata.height;
  width = Math.min(width, 774);
  height = Math.round(width / parseFloat(props.aspectRatio as string));
}

height ??=
  typeof props.aspectRatio === "number"
    ? parseFloat(width as unknown as string) / props.aspectRatio
    : undefined;

props.alt ||= "";
let attrs = { src, class: "", width: props.width, height: props.height };

if (!isRaw) {
  let attributes;
  props.src = src;
  ({ src, attributes } = await getImage({
    ...props,
    src: importedImage || src,
    format: "webp",
    width,
    height,
  } as ImageTransform));
  attrs = { ...attrs, ...attributes, src };
}
---

<span zaduma-image class="zaduma-image-box block relative overflow-hidden">
  <img
    {...attrs}
    class:list={["dark:opacity-80 rounded-sm", attrs.class]}
    loading={loading}
    decoding={decoding}
  />
  {
    !isRaw && (
      <span
        style={placeholder.css}
        class="absolute inset-0 w-full h-full transform scale-150 filter blur-2xl -z-10 dark:opacity-80"
      />
    )
  }
</span>
